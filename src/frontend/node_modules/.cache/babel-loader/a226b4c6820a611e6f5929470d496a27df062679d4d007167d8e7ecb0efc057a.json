{"ast":null,"code":"var _jsxFileName = \"/Users/eshagadgil/Desktop/bartender_helper/src/frontend/src/Mixers.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Mixers() {\n  _s();\n  const [mixers, setMixers] = useState([]);\n  useEffect(() => {\n    // Fetching data from the API\n    async function fetchMixers() {\n      try {\n        const response = await axios.get('http://localhost:4000/api/mixers'); // Adjust the URL as needed\n        setMixers(response.data);\n      } catch (error) {\n        console.error('Failed to fetch mixers:', error);\n      }\n    }\n    fetchMixers();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Mixers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), mixers.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: mixers.map(mixer => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: mixer.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 29\n        }, this), \" (\", mixer.type, \")\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 29\n        }, this), \"Flavor Profile: \", mixer.flavorProfile, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: mixer.imageUrl,\n          alt: mixer.name,\n          style: {\n            maxWidth: '100px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 29\n        }, this)]\n      }, mixer._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No mixers found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n}\n_s(Mixers, \"CzPfdlZBa5OlTrw4JVeJVv0TvUI=\");\n_c = Mixers;\nexport default Mixers;\nvar _c;\n$RefreshReg$(_c, \"Mixers\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Mixers","_s","mixers","setMixers","fetchMixers","response","get","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","mixer","name","type","flavorProfile","src","imageUrl","alt","style","maxWidth","_id","_c","$RefreshReg$"],"sources":["/Users/eshagadgil/Desktop/bartender_helper/src/frontend/src/Mixers.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction Mixers() {\n    const [mixers, setMixers] = useState([]);\n\n    useEffect(() => {\n        // Fetching data from the API\n        async function fetchMixers() {\n            try {\n                const response = await axios.get('http://localhost:4000/api/mixers'); // Adjust the URL as needed\n                setMixers(response.data);\n            } catch (error) {\n                console.error('Failed to fetch mixers:', error);\n            }\n        }\n\n        fetchMixers();\n    }, []);\n\n    return (\n        <div>\n            <h2>Mixers</h2>\n            {mixers.length > 0 ? (\n                <ul>\n                    {mixers.map(mixer => (\n                        <li key={mixer._id}>\n                            <strong>{mixer.name}</strong> ({mixer.type})\n                            <br />\n                            Flavor Profile: {mixer.flavorProfile}\n                            <br />\n                            <img src={mixer.imageUrl} alt={mixer.name} style={{ maxWidth: '100px' }} />\n                        </li>\n                    ))}\n                </ul>\n            ) : (\n                <p>No mixers found.</p>\n            )}\n        </div>\n    );\n}\n\nexport default Mixers;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAExCC,SAAS,CAAC,MAAM;IACZ;IACA,eAAeQ,WAAWA,CAAA,EAAG;MACzB,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,kCAAkC,CAAC,CAAC,CAAC;QACtEH,SAAS,CAACE,QAAQ,CAACE,IAAI,CAAC;MAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACnD;IACJ;IAEAJ,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIL,OAAA;IAAAW,QAAA,gBACIX,OAAA;MAAAW,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACdZ,MAAM,CAACa,MAAM,GAAG,CAAC,gBACdhB,OAAA;MAAAW,QAAA,EACKR,MAAM,CAACc,GAAG,CAACC,KAAK,iBACblB,OAAA;QAAAW,QAAA,gBACIX,OAAA;UAAAW,QAAA,EAASO,KAAK,CAACC;QAAI;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,MAAE,EAACG,KAAK,CAACE,IAAI,EAAC,GAC3C,eAAApB,OAAA;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,oBACU,EAACG,KAAK,CAACG,aAAa,eACpCrB,OAAA;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACNf,OAAA;UAAKsB,GAAG,EAAEJ,KAAK,CAACK,QAAS;UAACC,GAAG,EAAEN,KAAK,CAACC,IAAK;UAACM,KAAK,EAAE;YAAEC,QAAQ,EAAE;UAAQ;QAAE;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA,GALtEG,KAAK,CAACS,GAAG;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMd,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,gBAELf,OAAA;MAAAW,QAAA,EAAG;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACzB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACb,EAAA,CArCQD,MAAM;AAAA2B,EAAA,GAAN3B,MAAM;AAuCf,eAAeA,MAAM;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}